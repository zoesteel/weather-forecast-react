{"version":3,"sources":["images/sun.png","CitySearch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CitySearch","props","callAPI","url","state","city","units","axios","get","then","response","setState","data","name","temperature","main","temp","description","weather","onSearchComplete","symbol","undefined","catch","error","message","request","handleSubmit","e","preventDefault","handleUnitChange","target","value","id","handleChange","bind","this","onSubmit","className","htmlFor","type","onChange","defaultChecked","Component","App","callApi","a","fetch","json","body","status","Error","method","headers","JSON","stringify","post","responseToPost","handleSearch","src","SunIcon","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.07ad87af.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sun.7908f147.png\";","import React, {Component} from 'react';\nimport axios from 'axios';\n\nclass CitySearch extends Component {\n\n    constructor(props){\n        super(props)\n\n        this.state = {\n            city: '',            \n            temperature: '',\n            units: 'metric',\n            symbol: 'C',\n            error: ''\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleUnitChange = this.handleUnitChange.bind(this);\n        this.callAPI = this.callAPI.bind(this);\n    }\n\n    callAPI = () => {\n        const url = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&units=${this.state.units}&APPID=d5566182730361aa1c00849d2f86bb95`;     \n        axios.get(url)            \n            .then((response) => {\n                this.setState({ \n                    city: response.data.name,\n                    temperature: response.data.main.temp,\n                    description: response.data.weather[0].main\n                });            \n                this.props.onSearchComplete(this.state.city, this.state.temperature, this.state.units, this.state.symbol, this.state.description, undefined);\n            })\n            .catch((error) => { \n                if (error.response) {\n                    // server responded with status other than 2xx\n                    this.setState({\n                        error: error.response.data.message\n                    });\n                    this.props.onSearchComplete(undefined, undefined, undefined, undefined, undefined, this.state.error);\n                    \n                } else if (error.request) {\n                    // if no response was received    \n                    this.setState({\n                        error: error.request\n                    });\n\n                    this.props.onSearchComplete(undefined, undefined, undefined, undefined, undefined, this.state.error);\n                } else {\n                    // other error\n                    this.setState({\n                        error: error.message\n                    });\n                    this.props.onSearchComplete(undefined, undefined, undefined, undefined, undefined, this.state.error);\n                }\n            })\n        }\n\n    // componentDidMount() {\n    //     this.setState({\n    //         city: this.props.city\n    //     });\n    // }\n    \n    handleChange(e) {\n        this.setState({ \n          city: e.target.value\n        });\n    }\n\n    handleSubmit = (e) =>  {\n        e.preventDefault();\n        this.callAPI();\n    }\n\n    handleUnitChange = (e) => {\n        this.setState({\n            units: e.target.value,\n            symbol: e.target.id\n        })\n    }\n\n    render () {\n        return (\n            <form onSubmit={this.handleSubmit} className=\"form\">\n                <label \n                    htmlFor=\"city\">Enter city: \n                </label>\n                <br />\n                <input\n                    type=\"text\"\n                    id=\"city\"\n                    name=\"city\"                    \n                    city={this.state.city}\n                    onChange={this.handleChange}\n                />\n                <div onChange={this.handleUnitChange}>\n                    <input \n                        type=\"radio\" \n                        name=\"units\" \n                        value=\"metric\" \n                        id=\"C\"\n                        defaultChecked\n                    />\n                    <label \n                        htmlFor=\"celcius\">Celcius\n                    </label>\n                    <input \n                        type=\"radio\" \n                        name=\"units\" \n                        value=\"imperial\" \n                        id=\"F\" \n                    />\n                    <label \n                        htmlFor=\"fahrenheit\">Fahrenheit\n                    </label>\n                </div>\n                \n                <button type=\"submit\">SUBMIT</button>\n            </form>\n        )\n    }\n}\n\nexport default CitySearch;","import React, {Component} from 'react';\nimport './App.scss';\nimport SunIcon from './images/sun.png';\nimport CitySearch from './CitySearch';\n\nclass App extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            city: '',\n            temperature: '',\n            units: 'metric',\n            symbol: '',\n            description: '',\n            message: '',\n            error: undefined,\n        }        \n        this.handleSearch = this.handleSearch.bind(this);\n    }\n\n    handleSearch(city, temperature, units, symbol, description, error) {\n        this.setState({\n            city: city,\n            temperature: temperature,\n            units: units,\n            symbol: symbol,\n            description: description,\n            error: error,\n            message: `The temperature in ${city} is ${temperature}Â°${symbol}`,\n        });\n    }\n      \n    callApi = async () => {\n        const response = await fetch('/weather');\n        const body = await response.json();\n        if (response.status !== 200) throw Error(body.message);\n        \n        return body;\n    };\n      \n    handleSubmit = async e => {\n        e.preventDefault();\n        const response = await fetch('/weather', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ \n                post: this.state.post,\n                units: this.state.units\n            }),\n        });\n       \n        const body = await response.json();\n        this.setState({ \n            responseToPost: body,\n            city: body.city,\n            temperature: body.temperature,\n            description: body.description,\n            message: `The temperature in ${body.city} is ${body.temperature}Â°${this.state.symbol}`,\n         });\n    };\n\n    // handles change in radio buttons for imperial or metric\n    handleUnitChange = (e) => {\n        this.setState({\n            units: e.target.value,\n            symbol: e.target.id,\n        })\n    }\n\n    render () {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={SunIcon} alt=\"sun icon\" className=\"sun\" />\n                    <h1 className=\"title\">Check the weather</h1>\n                    \n\n                    {/* if error exists then display it */}\n                    { this.state.error !== undefined && \n                         <p>{this.state.error}</p>\n                    }\n\n                    {/*if no error message exists then display the weather message */}\n                    { this.state.error === undefined &&\n                        <div>\n                            <h2>{this.state.description}</h2>                    \n                            <p>{this.state.message}</p>     \n                        </div>\n                    }\n                    \n                    {/* the input form  */}\n                    <CitySearch \n                        onSearchComplete={this.handleSearch}\n                    />\n                    \n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}