{"ast":null,"code":"var _jsxFileName = \"/Users/Zoe/Documents/BCIT2019/get-weather-app/client/src/CitySearch.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nclass CitySearch extends Component {\n  constructor(props) {\n    super(props);\n\n    this.callAPI = () => {\n      return new Promise((resolve, reject) => {\n        axios.get({\n          uri: \"https://api.openweathermap.org/data/2.5/weather?q=\".concat(this.state.city, \"&units=\").concat(this.state.units, \"&APPID=d5566182730361aa1c00849d2f86bb95\"),\n          json: true\n        }, (error, response, body) => {\n          if (error) {\n            reject(\"Cannot connect to API\");\n          } else if (body.status === 404) {\n            reject(body.message);\n          } else {\n            this.setState({\n              temperature: response.data.main.temp\n            });\n            this.props.onSearchComplete(this.state.city, this.state.temperature, this.state.units);\n            resolve(response);\n          }\n        });\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.callAPI();\n    };\n\n    this.state = {\n      city: '',\n      temperature: '',\n      units: 'metric'\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.callAPI = this.callAPI.bind(this);\n  } // callAPI = () => {\n  //     const url = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&units=${this.state.units}&APPID=d5566182730361aa1c00849d2f86bb95`;     \n  //     axios.get(url)\n  //         .then((response) => {\n  //             this.setState({ \n  //                 temperature: response.data.main.temp \n  //             });            \n  //             this.props.onSearchComplete(this.state.city, this.state.temperature, this.state.units);\n  //         })\n  //         .catch((error) => { \n  //             console.log(error);\n  //         })\n  // }\n\n\n  componentDidMount() {\n    this.setState({\n      city: this.props.city\n    });\n  }\n\n  handleChange(e) {\n    this.setState({\n      city: e.target.value\n    });\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Enter city:\"), React.createElement(\"input\", {\n      id: \"city\",\n      type: \"text\",\n      value: this.state.city,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"radio\",\n      name: \"units\",\n      value: \"celcius\",\n      id: \"celcius\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"celcius\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Celcius\"), React.createElement(\"input\", {\n      type: \"radio\",\n      name: \"units\",\n      value: \"fahrenheit\",\n      id: \"fahrenheit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"fahrenheit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Fahrenheit\")), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n}\n\nexport default CitySearch;","map":{"version":3,"sources":["/Users/Zoe/Documents/BCIT2019/get-weather-app/client/src/CitySearch.js"],"names":["React","Component","axios","CitySearch","constructor","props","callAPI","Promise","resolve","reject","get","uri","state","city","units","json","error","response","body","status","message","setState","temperature","data","main","temp","onSearchComplete","handleSubmit","e","preventDefault","handleChange","bind","componentDidMount","target","value","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\n\nclass CitySearch extends Component {\n\n    constructor(props){\n        super(props)\n\n        this.state = {\n            city: '',            \n            temperature: '',\n            units: 'metric',\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.callAPI = this.callAPI.bind(this);\n    }\n\n    // callAPI = () => {\n    //     const url = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&units=${this.state.units}&APPID=d5566182730361aa1c00849d2f86bb95`;     \n    //     axios.get(url)\n            \n    //         .then((response) => {\n    //             this.setState({ \n    //                 temperature: response.data.main.temp \n    //             });            \n    //             this.props.onSearchComplete(this.state.city, this.state.temperature, this.state.units);\n    //         })\n    //         .catch((error) => { \n    //             console.log(error);\n    //         })\n    // }\n\n    callAPI = () => {\n        return new Promise((resolve, reject) => {\n            axios.get({\n                uri: `https://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&units=${this.state.units}&APPID=d5566182730361aa1c00849d2f86bb95`,\n                json: true            \n            },\n            (error, response, body) => {\n                if(error){\n                    reject(\"Cannot connect to API\")\n                }\n                \n                else if(body.status === 404){\n                    reject(body.message);\n                }\n                \n                else {                      \n                    this.setState({ \n                        temperature: response.data.main.temp \n                    });            \n                    this.props.onSearchComplete(this.state.city, this.state.temperature, this.state.units);\n                    resolve(response)\n                }\n            })\n        })\n    }\n\n    componentDidMount() {\n        this.setState({\n            city: this.props.city\n        });\n    }\n    \n    handleChange(e) {\n        this.setState({ \n          city: e.target.value \n        });\n    }\n\n    handleSubmit = (e) =>  {\n        e.preventDefault();\n        this.callAPI();\n    }\n\n    render () {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <label \n                    htmlFor=\"name\">Enter city: \n                </label>\n                <input\n                    id=\"city\"\n                    type=\"text\"\n                    value={this.state.city}\n                    onChange={this.handleChange}\n                />\n                <div>\n                <input \n                    type=\"radio\" \n                    name=\"units\" \n                    value=\"celcius\" \n                    id=\"celcius\"  \n                />\n                <label \n                    htmlFor=\"celcius\">Celcius\n                </label>\n                <input \n                    type=\"radio\" \n                    name=\"units\" \n                    value=\"fahrenheit\" \n                    id=\"fahrenheit\" \n                />\n                <label \n                    htmlFor=\"fahrenheit\">Fahrenheit\n                </label>\n                </div>\n                \n                <button type=\"submit\">Submit</button>\n            </form>\n        )\n    }\n}\n\nexport default CitySearch;"]},"metadata":{},"sourceType":"module"}